String mavenPath;
Map pipelineConfigMap;

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '7', artifactNumToKeepStr: '10', daysToKeepStr: '100', numToKeepStr: '200'))
        timeout(time: 5, unit: "MINUTES", activity: true)
        disableConcurrentBuilds()
        disableResume()
        skipDefaultCheckout(true)
        timestamps()
    }
    parameters {
        string(defaultValue: 'main', description: '', name: 'source_branch', trim: true)
        booleanParam(defaultValue: true, description: '', name: 'skip_unit_tests')
    }

    stages {
        stage("Checkout") {
            options {
                timeout(time: 1, unit: "MINUTES")
            }
            steps {
                script {
                    // Print parameters
                    echo("PARAM source_branch: '${params.source_branch}'")
                    echo("PARAM skip_unit_tests: '${params.skip_unit_tests}'")

                    // Checkout
                    sh("ls -la") // Debug
                    currentBuild.description = params.source_branch
                    checkout(
                        scm: scmGit(
                            branches: [[name: "refs/heads/${params.source_branch}"]],
                            extensions: [cleanBeforeCheckout(deleteUntrackedNestedRepositories: true)],
                            userRemoteConfigs: [
                                [credentialsId: 'github-write', url: 'https://github.com/DomnMihai/web-server.git']
                            ]
                        ),
                        changelog: true,
                        poll: false,
                    )
                    sh("ls -la") // Debug

                    // Read configuration
                    pipelineConfigMap = readYaml(file: "cicd/config/pipeline-config.yml")
                    echo("pipelineConfigMap:\n" + writeYaml(data: pipelineConfigMap, returnText: true))
                }
            }
        }

        stage("Maven install") {
            options {
                timeout(time: 3, unit: "MINUTES")
            }
            steps {
                script {
                    mavenPath = tool(name: 'maven-3.9.9', type: 'maven') + "/bin"
                    sh("${mavenPath}/mvn install -DskipTests")
                    sh("ls -lah target/") // DEBUG
                    sh("printenv")
                }
            }
        }
        stage("Maven test") {
            when { equals(expected: false, actual: params.skip_unit_tests) }
            options {
                timeout(time: 5, unit: "MINUTES")
            }
            steps {
                script {
                    catchError(buildResult: 'FAILURE', message: 'Maven test fail', stageResult: 'FAILURE') {
                        sh("${mavenPath}/mvn test")
                    }

                    junit(stdioRetention: '', testResults: 'target/surefire-reports/TEST-jenkins.workshops.*.xml')
                    recordCoverage(
                        tools: [[parser: 'JACOCO']],
                        id: 'jacoco',
                        name: 'Jacoco coverage',
                        enabledForFailure: true,
                        skipPublishingChecks: true,
                        sourceCodeRetention: 'LAST_BUILD',
                        qualityGates: [
                            [metric: 'LINE', threshold: 20, criticality: 'FAILURE'],
                            [metric: 'BRANCH', threshold: 80, criticality: 'FAILURE']
                        ]
                    );

                    if (currentBuild.result != null && currentBuild.result != "SUCCESS") {
                        error("Maven test failed")
                    }
                }
            }
        }

        stage("Stop web-server service") {
            options {
                timeout(time: 2, unit: "MINUTES")
            }
            steps {
                script {
                    final Map deploymentConfig = pipelineConfigMap["deployment"]
                    final String systemdServiceName = deploymentConfig["systemdServiceName"]
                    sh("sudo systemctl stop ${systemdServiceName}")
                }
            }
        }
        stage("Deploy") {
            options {
                timeout(time: 7, unit: "MINUTES")
            }
            steps {
                script {
                    final Map deploymentConfig = pipelineConfigMap["deployment"];
                    final String appDirectory = deploymentConfig["appDirectory"];
                    final String jarLinkName = deploymentConfig["jarLinkName"];

                    // Find jar file
                    String compiledJarListOutput;
                    dir("target/") {
                        compiledJarListOutput = sh(script: "ls ${deploymentConfig["jarFilePattern"]}", label: "Find compiled web-server jar", returnStdout: true).trim();
                    }
                    final List<String> compiledJarFilesList = compiledJarListOutput.split("\n");
                    assert compiledJarFilesList.size() == 1 : "Found wrong number of compiled jars. Got ${compiledJarFilesList.size()}";
                    final String compiledJarFile = compiledJarFilesList[0];
                    echo("compiledJarFile: ${compiledJarFile}");

                    // Archive artifacts
                    archiveArtifacts(artifacts: "target/${compiledJarFile}");

                    // Delete old versions
//                    timeout(time: 2, unit: 'MINUTES') {
//                        input(message: 'Proceed with deployment?', ok: 'Proceed');
//                    }
                    sh("find ${appDirectory} -mindepth 1 -maxdepth 1 -exec rm -r \"{}\" \\;")

                    // Deploy file
                    sh(script: "mv target/${compiledJarFile} ${appDirectory}/${compiledJarFile}", label: "Deploy web-server jar");

                    // Create symbolic link
                    sh(script: "ln --symbolic --force ./${compiledJarFile} ${appDirectory}/${jarLinkName}", label: "Create web-server jar symbolic link");
                }
            }
        }
        stage("Start web-server service") {
            options {
                timeout(time: 2, unit: "MINUTES")
            }
            steps {
                script {
                    final Map deploymentConfig = pipelineConfigMap["deployment"]
                    final String systemdServiceName = deploymentConfig["systemdServiceName"]
                    sh("sudo systemctl start ${systemdServiceName}")
                }
            }
        }

        stage("Terraform init") {
            options {
                timeout(time: 4, unit: "MINUTES")
            }
            steps {
                script {
                    sh("terraform version")
                    dir("terraform") {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-deployment-access-key', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                            sh("terraform init")
                        }
                    }
                }
            }
        }
        stage("Terraform apply") {
            options {
                timeout(time: 4, unit: "MINUTES")
            }
            steps {
                script {
                    dir("terraform") {
                        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-deployment-access-key', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                            sh("terraform apply -auto-approve")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                cleanWs()
            }
        }
    }
}
